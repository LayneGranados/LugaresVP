(function() {  'use strict';angular.module('blog.controllers', ['blog.services','angularModalService']).controller('TipoLugarListController', TipoLugarListController).controller('TipoLugarCreateController', TipoLugarCreateController).controller('TipoIdentificacionListController', TipoIdentificacionListController).controller('TipoIdentificacionCreateController', TipoIdentificacionCreateController).controller('LugarListController', LugarListController).controller('LugarCreateController', LugarCreateController).controller('SupervisionListController', SupervisionListController).controller('EvaluacionListController', EvaluacionListController).controller('PersonaListController', PersonaListController).controller('PersonaCreateController', PersonaCreateController).controller('ActividadListController', ActividadListController).controller('ActividadCreateController', ActividadCreateController).controller('CalificacionActividadListController', CalificacionActividadListController).controller('CalificacionActividadCreateController', CalificacionActividadCreateController).controller('CategoriaVehiculoListController', CategoriaVehiculoListController).controller('CategoriaVehiculoCreateController', CategoriaVehiculoCreateController).controller('ActividadTipoLugarListController', ActividadTipoLugarListController).controller('ActividadTipoLugarCreateController', ActividadTipoLugarCreateController).controller('TipoEmpleadoListController', TipoEmpleadoListController).controller('TipoEmpleadoCreateController', TipoEmpleadoCreateController).controller('ComplexController', [  '$scope', '$element', 'title', 'close',   function($scope, $element, title, close) {  $scope.name = null;  $scope.age = null;  $scope.title = title;  //  This close function doesn't need to use jQuery or bootstrap, because  //  the button has the 'data-dismiss' attribute.  $scope.close = function() {    close({      name: $scope.name,      age: $scope.age    }, 500); // close, but give 500ms for bootstrap to animate  };  //  This cancel function must use the bootstrap, 'modal' function because  //  the doesn't have the 'data-dismiss' attribute.  $scope.cancel = function() {    //  Manually hide the modal.    $element.modal('hide');        //  Now call close, returning control to the caller.    close({      name: $scope.name,      age: $scope.age    }, 500); // close, but give 500ms for bootstrap to animate  };}]).controller('SampleController', ['$scope', 'ModalService',   function($scope, ModalService) {    $scope.yesNoResult = null;  $scope.complexResult = null;  $scope.customResult = null;  $scope.showYesNo = function() {    ModalService.showModal({      templateUrl: 'yesno/yesno.html',      controller: 'YesNoController'    }).then(function(modal) {      modal.element.modal();      modal.close.then(function(result) {        $scope.yesNoResult = result ? 'You said Yes' : 'You said No';      });    });  };  $scope.showComplex = function() {    ModalService.showModal({      templateUrl: 'views/complex.html',      controller: 'ComplexController',      inputs: {        title: 'A More Complex Example'      }    }).then(function(modal) {      modal.element.modal();      modal.close.then(function(result) {        $scope.complexResult  = 'Name: ' + result.name + ', age: ' + result.age;      });    });  };  $scope.showCustom = function() {    ModalService.showModal({      templateUrl: 'views/custom.html',      controller: 'CustomController'    }).then(function(modal) {      modal.close.then(function(result) {        $scope.customResult = 'All good!';      });    });  };}]);function TipoLugarListController (TipoLugar) {  this.tipos = TipoLugar.query();}function TipoLugarCreateController (TipoLugar) {  var self = this;  self.create =              function(){                        var tipoLugar = new TipoLugar;                        tipoLugar.nombre=self.tipoLugar.nombre;                        tipoLugar.descripcion=self.tipoLugar.descripcion;                        tipoLugar.$save();                        };}function TipoEmpleadoListController (TipoEmpleado) {  this.tipos = TipoEmpleado.query();}function TipoEmpleadoCreateController (TipoEmpleado,uiGridConstants) {  var self = this;    self.create =    function(){      var tipoEmpleado = new TipoEmpleado;      tipoEmpleado.nombre=self.tipoEmpleado.nombre;      tipoEmpleado.descripcion=self.tipoEmpleado.descripcion;      tipoEmpleado.id = self.tipoEmpleado.id;      if(tipoEmpleado.id !== undefined){        tipoEmpleado.$update();        self.filas[0].nombre=tipoEmpleado.nombre;        self.filas[0].descripcion=tipoEmpleado.descripcion;        self.filas=null;      }else{        tipoEmpleado.$save();        self.gridOptions1.data.push({        'nombre':tipoEmpleado.nombre,        'descripcion':tipoEmpleado.descripcion,        'id':0      });      }            self.tipoEmpleado.nombre='';      self.tipoEmpleado.descripcion='';          };  this.tipos = TipoEmpleado.query();    this.gridOptions1 = {    paginationPageSize: 25,    data: self.tipos,    columnDefs: [{ field: 'id' }, { field: 'nombre' }, { field: 'descripcion' }],    multiSelect:false,    enableRowSelection: true, enableRowHeaderSelection: false  };  this.gridOptions1.onRegisterApi = function( gridApi ) {    self.gridApi = gridApi;  };  self.tipoEmpleado={};  self.filas={};  this.editar= function(){    self.filas=self.gridApi.selection.getSelectedRows();    self.tipoEmpleado.nombre=self.filas[0].nombre;    self.tipoEmpleado.descripcion=self.filas[0].descripcion;    self.tipoEmpleado.id=self.filas[0].id;      };}function TipoIdentificacionListController (TipoIdentificacion) {  this.tipos = TipoIdentificacion.query();}function TipoIdentificacionCreateController (TipoIdentificacion) {  var self = this;  self.create =              function(){                        var tipoIdentificacion = new TipoIdentificacion;                        tipoIdentificacion.nombre=self.tipoIdentificacion.nombre;                        tipoIdentificacion.codigo=self.tipoIdentificacion.codigo;                        tipoIdentificacion.$save();                        };}function LugarListController (Lugar) {  this.lugares = Lugar.query();}function SupervisionListController (Supervision) {  this.supervisiones = Supervision.query();}function EvaluacionListController (Evaluacion) {  this.evaluaciones = Evaluacion.query();}function LugarCreateController (Lugar) {  var self = this;  this.create =              function(){                        var lugar = new Lugar;                        lugar.nombre=self.lugar.nombre;                        lugar.descripcion=self.lugar.descripcion;                        lugar.tipolugar=parseInt(self.lugar.tipo_lugar_id, 10);                        lugar.$save();                        };}function PersonaListController (Persona) {  this.personas = Persona.query();}function PersonaCreateController (Persona) {  var self = this;  this.create =              function(){                        var persona = new Persona;                        persona.identificacion=self.persona.identificacion;                        persona.nombres=self.persona.nombres;                        persona.apellidos=self.persona.apellidos;                        persona.tipoidentificacion=parseInt(self.persona.tipo_identificacion_id, 10);                        persona.tipoempleado=parseInt(self.persona.tipoempleado, 10);                        persona.usuario=self.persona.usuario;                        persona.password=self.persona.password;                        persona.passwordrep=self.persona.passwordrep;                        persona.$save();                        };}function ActividadTipoLugarListController (ActividadTipoLugar) {  this.actividadTipoLugares = ActividadTipoLugar.query();}function ActividadTipoLugarCreateController (ActividadTipoLugar) {  var self = this;  this.create =              function(){                        var actividadTipoLugar = new ActividadTipoLugar;                        actividadTipoLugar.actividad = parseInt(self.actividad.actividad_id, 10);                        actividadTipoLugar.tipolugar = parseInt(self.tipolugar.tipolugar_id, 10);                        actividadTipoLugar.$save();                        };}function ActividadListController (Actividad) {    this.actividades = Actividad.query();}function ActividadCreateController (Actividad,$scope, ModalService) {  var self = this;  this.create =              function(){                        var actividad = new Actividad;                        actividad.nombre=self.actividad.nombre;                        actividad.descripcion=self.actividad.descripcion;                        actividad.$save();                        };  $scope.showComplex = function() {    ModalService.showModal({      templateUrl: 'views/complex.html',      controller: 'ComplexController',      inputs: {        title: 'A More Complex Example'      }    }).then(function(modal) {      modal.element.modal();      modal.close.then(function(result) {        $scope.complexResult  = 'Name: ' + result.name + ', age: ' + result.age;      });    });  };    self.create =              function(){                                                var actividad = new Actividad;                        actividad.nombre=self.actividad.nombre;                        actividad.descripcion=self.actividad.descripcion;                        if(actividad.id !== undefined){                                                    actividad.$update();                          self.filas[0].nombre=actividad.nombre;                          self.filas[0].descripcion=actividad.descripcion;                          self.filas=null;                        }else{                          actividad.$save();                          self.gridOptions1.data.push({                            'nombre':actividad.nombre,                            'descripcion':actividad.descripcion,                            'id':0                          });                        }            self.actividad.nombre='';      self.actividad.descripcion='';          };  this.actividades = Actividad.query();    this.gridOptions1 = {    paginationPageSize: 25,    data: self.actividades,    columnDefs: [{ field: 'id' }, { field: 'nombre' }, { field: 'descripcion' }],    multiSelect:false,    enableRowSelection: true, enableRowHeaderSelection: false  };  this.gridOptions1.onRegisterApi = function( gridApi ) {    self.gridApi = gridApi;  };  self.actividad={};  self.filas={};  this.editar= function(){    self.filas=self.gridApi.selection.getSelectedRows();    self.actividad.nombre=self.filas[0].nombre;    self.actividad.descripcion=self.filas[0].descripcion;    self.actividad.id=self.filas[0].id;      };}function CalificacionActividadListController (CalificacionActividad) {  this.calificaciones = CalificacionActividad.query();}function CalificacionActividadCreateController (CalificacionActividad) {  var self = this;  this.create =              function(){                        var calificacion = new CalificacionActividad;                        calificacion.nombre=self.calificacion.nombre;                        calificacion.actividad=parseInt(self.calificacion.actividad_id, 10);                        calificacion.$save();                        };}function CategoriaVehiculoListController (CategoriaVehiculo) {  this.categorias = CategoriaVehiculo.query();}function CategoriaVehiculoCreateController (CategoriaVehiculo) {  var self = this;  this.create =              function(){                        var categoria = new CategoriaVehiculo;                        categoria.nombre=self.categoria.nombre;                        categoria.descripcion=self.categoria.descripcion;                        categoria.calendario=self.categoria.calendario;                        if(self.categoria.nivel_servicio_id==undefined)                          categoria.nivel_servicio_id=false;                        else                          categoria.nivel_servicio_id=self.categoria.nivel_servicio_id;                        categoria.incluyeProtocolo=self.categoria.incluyeProtocolo;                        categoria.$save();                        };}})();